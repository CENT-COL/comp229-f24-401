const express = require('express');
const dotenv = require('dotenv');
const mongoose = require('mongoose');
const cors = require('cors');
const http = require('http');
const { server: WebSocketServer } = require('websocket');

dotenv.config();

// Instantiate and connect to MongoDB
mongoose.connect(process.env.MONGODB_URL);

const db = mongoose.connection;
db.on('error', (error) => console.error(error));
db.once('open', () => console.log('Connected to Database'));

const app = express();

// Add WebSocket server
const server = http.createServer(app);
const wss = new WebSocketServer({ httpServer: server });

// Gen AI - Chat initialization
const initializeChat = require('./utils/chat');

let chat; // Placeholder for the initialized chat object
initializeChat()
    .then((initializedChat) => {
        chat = initializedChat;
        console.log('Chat model initialized successfully.');
    })
    .catch((error) => {
        console.error('Failed to initialize chat model:', error);
    });

// WebSocket clients map
const clients = {};
const getUniqueId = () => {
    const s4 = () => Math.floor((1 + Math.random()) * 0x100000).toString(16).substring(1);
    return s4() + s4() + `'` + s4(); // Return a unique ID sample XXXXXXXX-XXXX
};

// Handle WebSocket requests
wss.on('request', (request) => {
    const userID = getUniqueId();
    const connection = request.accept(null, request.origin);
    clients[userID] = connection;

    console.log(new Date() + `: User ${userID} connected. Active clients: ${Object.keys(clients).length}`);

    connection.on('message', async (message) => {
        try {
            if (!chat) {
                console.error('Chat model is not initialized yet. Unable to process the message.');
                return;
            }
    
            if (message.type === 'utf8') {
                const messageData = JSON.parse(message.utf8Data);
                console.log('Received Message:', messageData);
    
                // Broadcast the user's message to all clients
                Object.keys(clients).forEach((clientID) => {
                    clients[clientID].sendUTF(
                        JSON.stringify({
                            type: 'message',
                            msg: messageData.msg,
                            user: messageData.user,
                        })
                    );
                });
    
                // If the message includes "google," generate a response from GenAI
                if (messageData.msg.toLowerCase().includes('@google')) {

                    const sanitizedMessage = messageData.msg.replace(/@google/gi, '').trim();

                    console.log('Sanitized Message:', sanitizedMessage);

                    

                    try {
                        console.log("message Data", messageData.msg);
                        const response = await chat.sendMessage(sanitizedMessage);
                        console.log(response.response.text());
                        const aiResponse = response.response?.text() || 'No response generated by AI.';
    
                        console.log('AI Response:', aiResponse);
    
                        // Send the AI response back to all connected clients
                        Object.keys(clients).forEach((clientID) => {
                            clients[clientID].sendUTF(
                                JSON.stringify({
                                    type: 'message',
                                    msg: aiResponse,
                                    user: 'AI',
                                })
                            );
                        });
    
                        console.log(`AI Response sent to all clients: ${aiResponse}`);
                    } catch (error) {
                        console.error('Error generating AI response:', error);
                    }
                }
            }
        } catch (error) {
            console.error('Error processing message:', error);
        }
    });
    

    connection.on('close', () => {
        delete clients[userID];
        console.log(`User ${userID} disconnected. Active clients: ${Object.keys(clients).length}`);
    });
});


const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(express.json());

// Routes
const projectRoutes = require('./routes/projects');
const userRoutes = require('./routes/users');

app.use('/api/projects', projectRoutes);
app.use('/api/users', userRoutes);

app.use('/api/data', (req, res) => {
    res.json({ message: 'Hello from server' });
});

// Start the server
server.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
